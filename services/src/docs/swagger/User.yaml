swagger: '2.0'
info:
  title: 'localhost:8080'
  version: '3.4.3.Final-2'
host: 'localhost:8080'
basePath: /auth
schemes:
  - https
securityDefinitions:
  client_cred:
    type: oauth2
    flow: application
    tokenUrl: https://{host}{basePath}/realms/{realm}/protocol/openid-connect/token
  bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - client_cred: []
  - bearer: []
paths:
  '/{realm}/users':
    get:
      produces:
        - application/json
      parameters:
        - description: 'A String contained in username, first or last name, or email'
          in: query
          name: search
          type: string
        - in: query
          name: lastName
          type: string
        - in: query
          name: firstName
          type: string
        - in: query
          name: email
          type: string
        - in: query
          name: username
          type: string
        - format: int32
          in: query
          name: first
          type: integer
        - description: Maximum results size (defaults to 100)
          format: int32
          in: query
          name: max
          type: integer
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/UserRepresentation'
            type: array
      operationId: getUsers
      summary: |-
        Get users

         Returns a list of users, filtered according to query parameters
    post:
      consumes:
        - application/json
      parameters:
        - in: body
          name: rep
          required: true
          schema:
            $ref: '#/definitions/UserRepresentation'
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '201':
          description: User created
          headers:
            location:
              description: Endpoint where to find the user resource
              type: string
        '401':
          description: Unauthorized
        '409':
          description: User already exists
          schema:
            properties:
              errorMessage:
                type: string
      operationId: createUser
      summary: |-
        Create a new user

         Username must be unique.
  '/{realm}/users/count':
    get:
      produces:
        - application/json
      parameters:
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            format: int32
            type: integer
      operationId: getUsersCount
  '/{realm}/users/{id}':
    delete:
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/Response'
      operationId: deleteUser
      summary: Delete the user
    get:
      produces:
        - application/json
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/UserRepresentation'
      operationId: getUser
      summary: Get representation of the user
    put:
      consumes:
        - application/json
      parameters:
        - in: body
          name: rep
          required: true
          schema:
            $ref: '#/definitions/UserRepresentation'
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/Response'
      operationId: updateUser
      summary: Update the user
  '/{realm}/users/{id}/consents':
    get:
      produces:
        - application/json
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              type: object
            type: array
      operationId: getConsents
      summary: Get consents granted by the user
  '/{realm}/users/{id}/consents/{client}':
    delete:
      parameters:
        - description: Client id
          in: path
          name: client
          required: true
          type: string
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: revokeConsent
      summary: Revoke consent and offline tokens for particular client from user
  '/{realm}/users/{id}/disable-credential-types':
    put:
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentialTypes
          required: true
          schema:
            items:
              type: string
            type: array
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: disableCredentialType
      summary: Disable all credentials for a user of a specific type
  '/{realm}/users/{id}/execute-actions-email':
    put:
      consumes:
        - application/json
      parameters:
        - description: Redirect uri
          in: query
          name: redirect_uri
          type: string
        - description: Client id
          in: query
          name: client_id
          type: string
        - description: Number of seconds after which the generated token expires
          format: int32
          in: query
          name: lifespan
          type: integer
        - description: required actions the user needs to complete
          in: body
          name: actions
          required: true
          schema:
            items:
              type: string
            type: array
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/Response'
      description: >-
        The redirectUri and clientId parameters are optional. If no redirect is
        given, then there will
         be no link back to click after actions have completed.  Redirect uri must be a valid uri for the
         particular clientId.
      operationId: executeActionsEmail
      summary: |-
        Send a update account email to the user

         An email contains a link the user can click to perform a set of required actions.
  '/{realm}/users/{id}/federated-identity':
    get:
      produces:
        - application/json
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/FederatedIdentityRepresentation'
            type: array
      operationId: getFederatedIdentity
      summary: Get social logins associated with the user
  '/{realm}/users/{id}/federated-identity/{provider}':
    delete:
      parameters:
        - description: Social login provider id
          in: path
          name: provider
          required: true
          type: string
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: removeFederatedIdentity
      summary: Remove a social login provider from user
    post:
      parameters:
        - description: Social login provider id
          in: path
          name: provider
          required: true
          type: string
        - in: body
          name: rep
          required: true
          schema:
            $ref: '#/definitions/FederatedIdentityRepresentation'
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/Response'
      operationId: addFederatedIdentity
      summary: Add a social login provider to the user
  '/{realm}/users/{id}/groups':
    get:
      produces:
        - application/json
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/GroupRepresentation'
            type: array
      operationId: groupMembership
  '/{realm}/users/{id}/groups/{groupId}':
    delete:
      parameters:
        - in: path
          name: groupId
          required: true
          type: string
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: removeMembership
    put:
      parameters:
        - in: path
          name: groupId
          required: true
          type: string
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: joinGroup
  '/{realm}/users/{id}/impersonation':
    post:
      produces:
        - application/json
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            type: object
      operationId: impersonate
      summary: Impersonate the user
  '/{realm}/users/{id}/logout':
    post:
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: logout
      summary: |-
        Remove all user sessions associated with the user

         Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
  '/{realm}/users/{id}/offline-sessions/{clientId}':
    get:
      produces:
        - application/json
      parameters:
        - in: path
          name: clientId
          required: true
          type: string
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/UserSessionRepresentation'
            type: array
      operationId: getOfflineSessions
      summary: Get offline sessions associated with the user and client
  '/{realm}/users/{id}/remove-totp':
    put:
      consumes:
        - application/json
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: removeTotp
      summary: Remove TOTP from the user
  '/{realm}/users/{id}/reset-password':
    put:
      consumes:
        - application/json
      parameters:
        - description: A Temporary password
          in: body
          name: pass
          required: true
          schema:
            $ref: '#/definitions/CredentialRepresentation'
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
      operationId: resetPassword
      summary: |-
        Set up a temporary password for the user

         User will have to reset the temporary password next time they log in.
  '/{realm}/users/{id}/send-verify-email':
    put:
      consumes:
        - application/json
      parameters:
        - description: Redirect uri
          in: query
          name: redirect_uri
          type: string
        - description: Client id
          in: query
          name: client_id
          type: string
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/Response'
      description: >-
        The redirectUri and clientId parameters are optional. The default for
        the
         redirect is the account client.
      operationId: sendVerifyEmail
      summary: |-
        Send an email-verification email to the user

         An email contains a link the user can click to verify their email address.
  '/{realm}/users/{id}/sessions':
    get:
      produces:
        - application/json
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          type: string
        - description: realm name (not id!)
          in: path
          name: realm
          required: true
          type: string
      responses:
        '200':
          description: No response was specified
          schema:
            items:
              $ref: '#/definitions/UserSessionRepresentation'
            type: array
      operationId: getSessions
      summary: Get sessions associated with the user
definitions:
  Response:
    type: string
    example:
      "Not specified! Might vary!"
  CredentialRepresentation:
    properties:
      algorithm:
        type: string
      config:
        $ref: '#/definitions/MultivaluedHashMap'
      counter:
        format: int32
        type: integer
      createdDate:
        format: int64
        type: integer
      device:
        type: string
      digits:
        format: int32
        type: integer
      hashIterations:
        format: int32
        type: integer
      hashedSaltedValue:
        type: string
      period:
        format: int32
        type: integer
      salt:
        type: string
      temporary:
        type: boolean
      type:
        type: string
      value:
        type: string
  FederatedIdentityRepresentation:
    properties:
      identityProvider:
        type: string
      userId:
        type: string
      userName:
        type: string
  GroupRepresentation:
    properties:
      access:
        type: object
      attributes:
        type: object
      clientRoles:
        type: object
      id:
        type: string
      name:
        type: string
      path:
        type: string
      realmRoles:
        items:
          type: string
        type: array
      subGroups:
        items:
          $ref: '#/definitions/GroupRepresentation'
        type: array
  MultivaluedHashMap:
    properties:
      empty:
        type: boolean
      loadFactor:
        format: float
        type: number
      threshold:
        format: int32
        type: integer
  UserConsentRepresentation:
    properties:
      clientId:
        type: string
      createdDate:
        format: int64
        type: integer
      grantedClientRoles:
        type: object
      grantedProtocolMappers:
        type: object
      grantedRealmRoles:
        items:
          type: string
        type: array
      lastUpdatedDate:
        format: int64
        type: integer
  UserRepresentation:
    properties:
      access:
        type: object
      attributes:
        type: object
      clientConsents:
        items:
          $ref: '#/definitions/UserConsentRepresentation'
        type: array
      clientRoles:
        type: object
      createdTimestamp:
        format: int64
        type: integer
      credentials:
        items:
          $ref: '#/definitions/CredentialRepresentation'
        type: array
      disableableCredentialTypes:
        items:
          type: string
        type: array
        uniqueItems: true
      email:
        type: string
      emailVerified:
        type: boolean
      enabled:
        type: boolean
      federatedIdentities:
        items:
          $ref: '#/definitions/FederatedIdentityRepresentation'
        type: array
      federationLink:
        type: string
      firstName:
        type: string
      groups:
        items:
          type: string
        type: array
      id:
        type: string
      lastName:
        type: string
      notBefore:
        format: int32
        type: integer
      origin:
        type: string
      realmRoles:
        items:
          type: string
        type: array
      requiredActions:
        items:
          type: string
        type: array
      self:
        type: string
      serviceAccountClientId:
        type: string
      username:
        type: string
  UserSessionRepresentation:
    properties:
      clients:
        type: object
      id:
        type: string
      ipAddress:
        type: string
      lastAccess:
        format: int64
        type: integer
      start:
        format: int64
        type: integer
      userId:
        type: string
      username:
        type: string

